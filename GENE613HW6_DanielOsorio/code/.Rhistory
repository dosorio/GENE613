progeny <- centeredP[nelloreAngus$Dam %in% dam]
EBV <- NULL
ACC <- NULL
EBV <- ACC <- NULL
if(length(progeny) > 2){
} else {
print(0.5 * h2 * progeny)
}
names(EBV) <- names(ACC) <- c("911H", "189P", "527S", "374R")
EBV <- ACC <- NULL
2* length(progeny)
dam <- "911H"
progeny <- centeredP[nelloreAngus$Dam %in% dam]
dam <- "911H"
dam <- "911H"
2* length(progeny)
2 * length(progeny) * h2
for (dam in c("911H", "189P", "527S", "374R")){
progeny <- centeredP[nelloreAngus$Dam %in% dam]
EBV <- ACC <- NULL
if(length(progeny) > 2){
numeratorEBV <- (2 * length(progeny) * h2)
denominatorEBV <- 4 + ((length(progeny) -1) * h2)
numeratorACC <- (length(progeny) * h2)
EBV <- c(EBV, ((numeratorEBV/denominatorEBV)*mean(progeny)))
ACC <- c(ACC, sqrt(numeratorACC/denominatorEBV))
} else {
EBV <- c(EBV, 0.5 * h2 * progeny)
ACC <- c(ACC, 0.5 * sqrt(h2))
}
}
EBV <- ACC <- NULL
for (dam in c("911H", "189P", "527S", "374R")){
progeny <- centeredP[nelloreAngus$Dam %in% dam]
if(length(progeny) > 2){
numeratorEBV <- (2 * length(progeny) * h2)
denominatorEBV <- 4 + ((length(progeny) -1) * h2)
numeratorACC <- (length(progeny) * h2)
EBV <- c(EBV, ((numeratorEBV/denominatorEBV)*mean(progeny)))
ACC <- c(ACC, sqrt(numeratorACC/denominatorEBV))
} else {
EBV <- c(EBV, 0.5 * h2 * progeny)
ACC <- c(ACC, 0.5 * sqrt(h2))
}
}
EBC
EBV
EBV <- ACC <- NULL
for (dam in c("911H", "189P", "527S", "374R")){
progeny <- centeredP[nelloreAngus$Dam %in% dam]
if(length(progeny) > 2){
numeratorEBV <- (2 * length(progeny) * h2)
denominatorEBV <- 4 + ((length(progeny) -1) * h2)
numeratorACC <- (length(progeny) * h2)
EBV <- c(EBV, ((numeratorEBV/denominatorEBV)*mean(progeny)))
ACC <- c(ACC, sqrt(numeratorACC/denominatorEBV))
} else {
EBV <- c(EBV, 0.5 * h2 * progeny)
ACC <- c(ACC, 0.5 * sqrt(h2))
}
}
ACC
names(EBV) <- names(ACC) <- c("911H", "189P", "527S", "374R")
EBV <- ACC <- NULL
for (sire in c("551G", "494S"){
for (sire in c("551G", "494S")){
progeny <- centeredP[nelloreAngus$Sire %in% sire]
if(length(progeny) > 2){
numeratorEBV <- (2 * length(progeny) * h2)
denominatorEBV <- 4 + ((length(progeny) -1) * h2)
numeratorACC <- (length(progeny) * h2)
EBV <- c(EBV, ((numeratorEBV/denominatorEBV)*mean(progeny)))
ACC <- c(ACC, sqrt(numeratorACC/denominatorEBV))
} else {
EBV <- c(EBV, 0.5 * h2 * progeny)
ACC <- c(ACC, 0.5 * sqrt(h2))
}
}
EBV <- ACC <- NULL
for (sire in c("551G", "494S")){
progeny <- centeredP[nelloreAngus$Sire %in% sire]
if(length(progeny) > 2){
numeratorEBV <- (2 * length(progeny) * h2)
denominatorEBV <- 4 + ((length(progeny) -1) * h2)
numeratorACC <- (length(progeny) * h2)
EBV <- c(EBV, ((numeratorEBV/denominatorEBV)*mean(progeny)))
ACC <- c(ACC, sqrt(numeratorACC/denominatorEBV))
} else {
EBV <- c(EBV, 0.5 * h2 * progeny)
ACC <- c(ACC, 0.5 * sqrt(h2))
}
}
EBV
var(centeredP[c("602W", "686W", "919Z")])
nelloreAngus <- NULL
nelloreAngus$Individual <- c("189P","374R", "527S","602W", "686W", "919Z")
nelloreAngus$Phenotype <- c(20, -14,11, -1, 21, -19)
nelloreAngus$Sire <- c("551G", "551G", "551G", "494S", "494S", "494S")
nelloreAngus$Dam <- c("911H", "911H", "911H", "189P", "527S", "374R")
nelloreAngus <- as.data.frame.array(as.data.frame(nelloreAngus))
Y <- centeredP[c("602W", "686W", "919Z")]
X <- centeredP[c("189P", "527S", "374R")]
centeredP <- nelloreAngus$Phenotype - mean(nelloreAngus$Phenotype)
names(centeredP) <- nelloreAngus$Individual
aR <- additiveRelationship(data = nelloreAngus,
orderedIDs = c("551G", "911H", "494S", "374R",
"189P", "527S", "919Z", "602W", "686W"))
Y <- centeredP[c("602W", "686W", "919Z")]
X <- centeredP[c("189P", "527S", "374R")]
Y
var(Y)
var(Y)/var(c(X,Y))
var(Y)/var(c(Y))
var(Y)/var(c(X))
aR <- additiveRelationship(data = nelloreAngus,
orderedIDs = c("551G", "911H", "494S", "374R",
"189P", "527S", "919Z", "602W", "686W"))
additiveRelationship <- function(data, orderedIDs){
data <- as.matrix(data[, c("Individual", "Sire", "Dam")])
n <- length(orderedIDs)
aR <- matrix(
data = 0,
nrow = n,
ncol = n,
dimnames = list(orderedIDs, orderedIDs)
)
diag(aR) <- 1
for(i in seq_len(n)){
for(j in seq_len(n)){
if(j > i){
row <- orderedIDs[i]
column <- orderedIDs[j]
parents <- data[data[,"Individual"] %in% column,2:3]
if(all(is.na(parents))){next()}
value <- (0.5 * (aR[row,parents[1]] + aR[row,parents[2]]))
aR[row,column] <- aR[column,row] <-  value
} else {
row <- orderedIDs[i]
parents <- data[data[,"Individual"] %in% row,2:3]
if(all(is.na(parents))){next()} else {
aR[row,row] <- (1+ 0.5 * (aR[parents[1],parents[2]]))}
}
}
}
return(aR)
}
aR <- additiveRelationship(data = nelloreAngus,
orderedIDs = c("551G", "911H", "494S", "374R",
"189P", "527S", "919Z", "602W", "686W"))
Y <- centeredP[c("602W", "686W", "919Z")]
X <- centeredP[c("189P", "527S", "374R")]
var(aR["919Z",c("602W", "686W", "919Z")])/var(Y)
P <- matrix(,nrow = 4, ncol = 4)
diag(P) <- 2250
beta <- solve(P) %*% r
beta <- c(1,1,1,1)
beta %*% c(50, 65, 40, 75)
additiveRelationship <- function(data, orderedIDs){
data <- as.matrix(data[, c("Individual", "Sire", "Dam")])
n <- length(orderedIDs)
aR <- matrix(
data = 0,
nrow = n,
ncol = n,
dimnames = list(orderedIDs, orderedIDs)
)
diag(aR) <- 1
for(i in seq_len(n)){
for(j in seq_len(n)){
if(j > i){
row <- orderedIDs[i]
column <- orderedIDs[j]
parents <- data[data[,"Individual"] %in% column,2:3]
if(all(is.na(parents))){next()}
value <- (0.5 * (aR[row,parents[1]] + aR[row,parents[2]]))
aR[row,column] <- aR[column,row] <-  value
} else {
row <- orderedIDs[i]
parents <- data[data[,"Individual"] %in% row,2:3]
if(all(is.na(parents))){next()} else {
aR[row,row] <- (1+ 0.5 * (aR[parents[1],parents[2]]))}
}
}
}
return(aR)
}
additiveRelationship(data = Individual, orderedIDs = c("X4"))
Individual <- NULL
Individual$Individual <- c("X1","X2", "X3","X4")
Individual$Sire <- c("X4")
Individual$Dam <- c(NA)
Individual$Dam <- c(NA,NA,NA,NA)
Individual <- as.data.frame.array(as.data.frame(Individual))
Individual <- NULL
Individual$Individual <- c("X1","X2", "X3","X4")
Individual$Sire <- c("X4","X4","X1",NA)
Individual$Dam <- c(NA,NA,NA,NA)
Individual <- as.data.frame.array(as.data.frame(Individual))
additiveRelationship(data = Individual, orderedIDs = c("X4"))
additiveRelationship(data = Individual, orderedIDs = c("X4","X2,X1,X3"))
additiveRelationship(data = Individual, orderedIDs = c("X4","X2","X1","X3"))
additiveRelationship(data = Individual, orderedIDs = c("X4","X2","X1","X3"))
Individual <- NULL
Individual$Individual <- c("X1","X2", "X3","X4")
Individual$Sire <- c("X4","X4","X1",NA)
Individual$Dam <- c(NA,NA,NA,NA)
Individual <- as.data.frame.array(as.data.frame(Individual))
Individual
Individual$Sire <- c("X4","X4","X1", NA)
Individual$Dam <- c(NA,NA,NA,NA)
Individual <- as.data.frame.array(as.data.frame(Individual))
additiveRelationship(data = Individual, orderedIDs = c(""))
additiveRelationship(data = Individual, orderedIDs = c("X1"))
Individual$Sire <- c("X4","X4","X1",0)
Individual$Dam <- c(NA,NA,NA,NA)
Individual <- as.data.frame.array(as.data.frame(Individual))
additiveRelationship(data = Individual, orderedIDs = c("X1"))
Individual <- NULL
Individual$Individual <- c("X1","X2", "X3","X4","X5","X6")
Individual$Sire <- c("X4","X4","X1", "X5",NA,NA)
Individual$Dam <- c(NA,NA,NA,"X6",NA,NA)
Individual <- as.data.frame.array(as.data.frame(Individual))
additiveRelationship(data = Individual, orderedIDs = c("X1"))
additiveRelationship(data = Individual, orderedIDs = c("X2"))
additiveRelationship(data = Individual, orderedIDs = c("X3"))
Individual <- NULL
Individual$Individual <- c("X1","X2", "X3","X4")
Individual$Sire <- c("X4","X4","X1", NA)
Individual$Dam <- c(NA,NA,NA,NA)
Individual <- as.data.frame.array(as.data.frame(Individual))
additiveRelationship(data = Individual, orderedIDs = c("X3"))
additiveRelationship(data = Individual, orderedIDs = c("X4"))
additiveRelationship(data = Individual, orderedIDs = c("X4","X3"))
additiveRelationship(data = Individual, orderedIDs = c("X4","X1"))
additiveRelationship(data = Individual, orderedIDs = c("X4","X2"))
additiveRelationship(data = Individual, orderedIDs = c("X4","X4"))
Individual$Sire <- c("X4","X4","X1", NA)
Individual$Dam <- c(NA,NA,NA,NA)
`createA` <-
function(s, d){
if (nargs()==1){
stop("sire vector and dam vector are required")
}
if (length(s) != length(d)){
stop("size of the sire vector and dam vector are different!")
}
n <- length(s)
N <- n + 1
A <- matrix(0, ncol=N, nrow=N)
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2
for(j in (i+1):n){
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i,d[j]] )/2
A[j,i] <- A[i,j]
}
}
return(A[1:n, 1:n])
}
createA <- function(s, d){
if (nargs()==1){
stop("sire vector and dam vector are required")
}
if (length(s) != length(d)){
stop("size of the sire vector and dam vector are different!")
}
n <- length(s)
N <- n + 1
A <- matrix(0, ncol=N, nrow=N)
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2
for(j in (i+1):n){
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i,d[j]] )/2
A[j,i] <- A[i,j]
}
}
return(A[1:n, 1:n])
}
createA(c("X1"),c("X1"))
createA(c(0),c(1))
createA(c(0,1),c(1,2))
createA(c(0,1,3),c(1,2,0))
createA(c(0,4),c(0,0))
createA(c(4),c(0))
createA(c(1),c(0,))
createA(c(1),c(0))
createA(c(4,4),c(0,0))
createA(c(1,1),c(0,0))
createA(c(1,1,2),c(0,0,0))
createA(c(1,1,2,0),c(0,0,0,0))
createA(c(0,1,1,2),c(0,0,0,0))
createA(c(0,1,1,2),c(0,0,0,0))
P <- createA(c(0,1,1,2),c(0,0,0,0))
P <- createA(c(0,1,1,2),c(0,0,0,0))
P[,c(2,3,4,1)]
colnames(P) <- rownames(P) <- paste0("X",1:4)
P
P <- P[,c(2,3,4,1)]
P
P <- P[c(2,3,4,1),c(2,3,4,1)]
P <- createA(c(0,1,1,2),c(0,0,0,0))
P <- P[c(2,3,4,1),c(2,3,4,1)]
colnames(P) <- rownames(P) <- paste0("X",1:4)
P
P <- P * 860
diag(P) <- 2250
P
P <- createA(c(0,1,1,2),c(0,0,0,0))
P <- P[c(2,3,4,1),c(2,3,4,1)]
r <- P[1,]
r
beta %*% c(50, 65, 40, 75)
beta %*% c(50, 65, 40, 75)
beta %*% c(50, 65, 40, 75)
beta %*% c(50, 65, 40, 75)
sqrt((r/createA(c(0,1,1,2),c(0,0,0,0))))
sqrt((r/createA(c(0,1,1,2),c(0,0,0,0))[c(2,3,4,1),c(2,3,4,1)]))
sqrt((r/createA(c(0,1,1,2),c(0,0,0,0))[c(2,3,4,1),c(2,3,4,1)])%*% beta)
sqrt(t((r/createA(c(0,1,1,2),c(0,0,0,0))[c(2,3,4,1),c(2,3,4,1)])) %*% beta)
createA(c(0,1,1,2),c(0,0,0,0))[c(2,3,4,1),c(2,3,4,1)]
createA(c(0,1,1,2),c(0,0,0,0))[c(2,3,4,1),c(2,3,4,1)] %*% beta
t(createA(c(0,1,1,2),c(0,0,0,0))[c(2,3,4,1),c(2,3,4,1)]) %*% beta
r
r/P
t(r/P)
t(r/P) %*% b
t(r/P) %*% beta
sqrt(t(r/P) %*% beta)
r/860
r/860 %*% beta
t(r/860) %*% beta
t(r) %*% beta
t(r/680) %*% beta
t(r/860) %*% beta
sqrt(t(r/860) %*% beta)
ACC <- sqrt(t(r/860) %*% beta)
names(ACC) <- ACC
ACC <- sqrt(t(r/860) %*% beta)
names(ACC) <- "ACC"
ACC <- sqrt(t(r/860) %*% beta)
names(ACC)
colnames(ACC)
ACC
ACC <- sqrt(t(r/860) %*% beta)
names(ACC) <- "ACC"
ACC
colnames(ACC) <- "ACC"
EBV <- c(50, 65, 40, 75) %*% beta
createA(c(0,1,1,2),c(0,0,0,0))
createA(c(0,0,1,1,3,4),c(0,0,0,2,0,0))
y = c(930, 880, 965, 945, 970, 950)
A = createA(c(0,0,1,1,3,4),c(0,0,0,2,0,0))
model.matrix(as.factor(1,1,2,2,3,3,3))
model.matrix(as.factor(c(1,1,2,2,3,3,3)))
cbind(1,c(1,1,2,2,3,3,3))
model.matrix(cbind(1,c(1,1,2,2,3,3,3)))
X = matrix(c(1,1,1,1,1,1),ncol = 4, byrow = FALSE)
X = matrix(c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1),ncol = 4, byrow = FALSE)
X
Z = identity(6)
Z
identity(6)
Z = matrix(0, nrow = 6, ncol = 6)
diag(Z) = 1
>
Z
t(X)%*%X
t(X)%*%X
t(X)%*%Z
t(Z)%*%Z
t(Z)%*%X
t(Z)%*%>
t(Z)%*%Z
450+480+610+660
930+980+965+945+970+950
930+880
965+945
970+950
y = c(5740, 1810, 1910, 1920, 930, 880, 965, 945, 970, 950)
A = createA(c(0,0,1,1,3,4),c(0,0,0,2,0,0))
X = matrix(c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1),ncol = 4, byrow = FALSE)
Z = matrix(0, nrow = 6, ncol = 6)
diag(Z) = 1
t(X)%*%X
t(X)%*%Z
t(Z)%*%X
t(Z)%*%Z
t(X)%*%X
t(X)%*%Z
t(Z)%*%X
t(Z)%*%Z
cbind(t(X)%*%X,t(X)%*%Z)
cbind(t(Z)%*%X,t(Z)%*%Z)
rbind(cbind(t(X)%*%X,t(X)%*%Z),cbind(t(Z)%*%X,t(Z)%*%Z))
MME <- rbind(cbind(t(X)%*%X,t(X)%*%Z),cbind(t(Z)%*%X,t(Z)%*%Z))
t(Z)%*%Z)
t(Z)%*%Z
t(Z)%*%Z*solve(A)
A
solve(A)
solve(A) * (2500/900)
t(Z)%*%Z * solve(A) * (2500/900)
t(Z) %*% Z + (solve(A) * (2500/900))
rbind(cbind(t(X)%*%X,t(X)%*%Z),cbind(t(Z)%*%X,t(Z) %*% Z + (solve(A) * (2500/900))))
round(rbind(cbind(t(X)%*%X,t(X)%*%Z),cbind(t(Z)%*%X,t(Z) %*% Z + (solve(A) * (2500/900)))),3)
MME <- round(rbind(cbind(t(X)%*%X,t(X)%*%Z),cbind(t(Z)%*%X,t(Z) %*% Z + (solve(A) * (2500/900)))),3)
MME[-1,-1]
solve(MME[-1,-1])
solve(MME[-1,-1]) %*% y[-1]
BU <- solve(MME[-1,-1]) %*% y[-1]
rownames(BU) <- c(paste0("beta",1:3))
t(Z) %*% Z + (solve(A) * (2500/900))c(paste0("beta",1:3))
c(paste0("beta",1:3))
rownames(BU) <- c(paste0("beta",1:3),paste0("u",1:6))
BU
solve(MME)
solve(MME[-1,-1])
# y = c(5740, 1810, 1910, 1920, 930, 880, 965, 945, 970, 950)
# A = createA(c(0,0,1,1,3,4),c(0,0,0,2,0,0))
# X = matrix(c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1),ncol = 4, byrow = FALSE)
# Z = matrix(0, nrow = 6, ncol = 6)
# diag(Z) = 1
y <- c(2200,930,1270,450,480,610,660)
A <- createA(s = c(0,0,1,1),d = c(0,0,0,2))
A
h <- (2500-900)/900
MME <- round(rbind(cbind(t(X)%*%X,t(X)%*%Z),cbind(t(Z)%*%X,t(Z) %*% Z + (solve(A) * (h)))),2)
(2500-900)/900
h <- (2500-900)/900
solve(A)
solve(A)*h
MME <- round(rbind(cbind(t(X)%*%X,t(X)%*%Z),cbind(t(Z)%*%X,t(Z) %*% Z + (solve(A) * h))),2)
solve(A)*hz
Z + (solve(A) * h)
Z + (solve(A) * h)
Z
solve(A)
y = c(5740, 1810, 1910, 1920, 930, 880, 965, 945, 970, 950)
A = createA(c(0,0,1,1,3,4),c(0,0,0,2,0,0))
X = matrix(c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1),ncol = 4, byrow = FALSE)
Z = matrix(0, nrow = 6, ncol = 6)
diag(Z) = 1
h <- (2500-900)/900
MME <- round(rbind(cbind(t(X)%*%X,t(X)%*%Z),cbind(t(Z)%*%X,t(Z) %*% Z + (solve(A) * h))),2)
MME
createA(c(0,1,1,2),c(0,0,0,0))
P
P <- createA(c(0,1,1,2),c(0,0,0,0))
P <- P[c(2,3,4,1),c(2,3,4,1)]
r <- P[1,]
colnames(P) <- rownames(P) <- paste0("X",1:4)
P <- P * 860
diag(P) <- 2250
P
r
P <- createA(c(0,1,1,2),c(0,0,0,0))
P <- P[c(2,3,4,1),c(2,3,4,1)]
P
r <- r*860
names(r) <- paste0("X",1:4)
r
solve(P)
round(solve(P),2)
createA <- function(s, d){
n <- length(s)
N <- n + 1
A <- matrix(0, ncol=N, nrow=N)
s <- (s == 0)*(N) + s
d <- (d == 0)*N + d
for(i in 1:n){
A[i,i] <- 1 + A[s[i], d[i]]/2
for(j in (i+1):n){
if (j > n) break
A[i,j] <- ( A[i, s[j]] + A[i,d[j]] )/2
A[j,i] <- A[i,j]
}
}
return(A[1:n, 1:n])
}
P <- createA(c(0,1,1,2),c(0,0,0,0))
P <- P[c(2,3,4,1),c(2,3,4,1)]
r <- P[1,]
colnames(P) <- rownames(P) <- paste0("X",1:4)
P <- P * 860
diag(P) <- 2250
P
r <- r*860
names(r) <- paste0("X",1:4)
r
solve(P)
round(solve(P),5)
round(solve(P),6)
beta <- solve(P) %*% r
colnames(beta) <- "betaHat"
beta
round(beta,3)
r
beta <- solve(P) %*% r
EBV <- c(50, 65, 40, 75) %*% beta
EBV <- c(50, 65, 40, 75) %*% beta
colnames(EBV) <- "EBV"
EBV
round(EBV,3)
ACC <- sqrt(t(r/860) %*% beta)
colnames(ACC) <- "ACC"
ACC
round(ACC,3)
